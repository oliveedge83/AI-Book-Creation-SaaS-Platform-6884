import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { motion } from 'framer-motion';
import { useAuth } from '../contexts/AuthContext';
import { dbHelpers } from '../lib/supabase';
import SafeIcon from '../common/SafeIcon';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import * as FiIcons from 'react-icons/fi';
import toast from 'react-hot-toast';

const { FiBook, FiEdit3, FiSave, FiDownload, FiImage, FiPlay, FiPause, FiCheck, FiClock } = FiIcons;

const BookEditor = () => {
  const { id } = useParams();
  const { user } = useAuth();
  const [book, setBook] = useState(null);
  const [chapters, setChapters] = useState([]);
  const [selectedTopic, setSelectedTopic] = useState(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [generating, setGenerating] = useState(false);
  const [generatingTopicId, setGeneratingTopicId] = useState(null);

  useEffect(() => {
    if (user && id) {
      loadBook();
    }
  }, [user, id]);

  const loadBook = async () => {
    try {
      const { data, error } = await dbHelpers.getBooks(user.id);
      if (error) throw error;

      const currentBook = data.find(b => b.id === id);
      if (!currentBook) {
        toast.error('Book not found');
        return;
      }

      setBook(currentBook);
      setChapters(currentBook.chapters || []);

      // Auto-select first topic if available
      if (currentBook.chapters?.length > 0 && currentBook.chapters[0].topics?.length > 0) {
        setSelectedTopic(currentBook.chapters[0].topics[0]);
      }
    } catch (error) {
      toast.error('Failed to load book');
      console.error('Error loading book:', error);
    } finally {
      setLoading(false);
    }
  };

  const generateTopicContent = async (topic) => {
    setGenerating(true);
    setGeneratingTopicId(topic.id);

    try {
      // For demo, generate placeholder content
      const placeholderContent = `
        <h2>${topic.title}</h2>
        <p>This is AI-generated content for ${topic.title}. In a real implementation, this would be comprehensive, long-form content generated by your selected LLM model.</p>
        
        <h3>Key Concepts</h3>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
        
        <h3>Practical Applications</h3>
        <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
        
        <h3>Best Practices</h3>
        <ul>
          <li>Follow industry standards and guidelines</li>
          <li>Implement proper error handling</li>
          <li>Document your code thoroughly</li>
          <li>Test extensively before deployment</li>
        </ul>
        
        <h3>Common Pitfalls</h3>
        <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.</p>
        
        <h3>Summary</h3>
        <p>Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.</p>
      `;

      await updateTopicContent(topic.id, placeholderContent);
      toast.success('Demo content generated!');
    } catch (error) {
      toast.error('Failed to generate content');
    } finally {
      setGenerating(false);
      setGeneratingTopicId(null);
    }
  };

  const updateTopicContent = async (topicId, content) => {
    try {
      await dbHelpers.updateTopic(topicId, {
        content,
        status: 'completed',
        updated_at: new Date().toISOString()
      });

      // Update local state
      setChapters(chapters.map(chapter => ({
        ...chapter,
        topics: chapter.topics?.map(topic => 
          topic.id === topicId ? { ...topic, content, status: 'completed' } : topic
        ) || []
      })));

      // Update selected topic if it's the one being edited
      if (selectedTopic?.id === topicId) {
        setSelectedTopic({ ...selectedTopic, content, status: 'completed' });
      }
    } catch (error) {
      toast.error('Failed to save content');
    }
  };

  const saveTopicContent = async () => {
    if (!selectedTopic) return;

    setSaving(true);
    try {
      await updateTopicContent(selectedTopic.id, selectedTopic.content);
      toast.success('Content saved!');
    } catch (error) {
      toast.error('Failed to save content');
    } finally {
      setSaving(false);
    }
  };

  const generateImage = async (topic) => {
    toast.success('Image generation feature coming soon!');
  };

  const exportBook = async (format) => {
    toast.success(`${format} export feature coming soon!`);
  };

  const getTopicStatusIcon = (status) => {
    switch (status) {
      case 'completed':
        return <SafeIcon icon={FiCheck} className="h-4 w-4 text-green-500" />;
      case 'generating':
        return <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>;
      default:
        return <SafeIcon icon={FiClock} className="h-4 w-4 text-gray-400" />;
    }
  };

  const quillModules = {
    toolbar: [
      [{ 'header': [1, 2, 3, false] }],
      ['bold', 'italic', 'underline', 'strike'],
      [{ 'list': 'ordered' }, { 'list': 'bullet' }],
      [{ 'indent': '-1' }, { 'indent': '+1' }],
      ['link', 'image'],
      ['clean']
    ],
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="flex h-screen">
        {/* Sidebar - Chapter/Topic Navigation */}
        <div className="w-80 bg-white border-r border-gray-200 overflow-y-auto">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900 mb-2">{book?.title}</h2>
            <div className="flex space-x-2">
              <button
                onClick={() => exportBook('PDF')}
                className="flex-1 inline-flex items-center justify-center px-3 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors text-sm"
              >
                <SafeIcon icon={FiDownload} className="h-4 w-4 mr-1" />
                PDF
              </button>
              <button
                onClick={() => exportBook('CSV')}
                className="flex-1 inline-flex items-center justify-center px-3 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors text-sm"
              >
                <SafeIcon icon={FiDownload} className="h-4 w-4 mr-1" />
                CSV
              </button>
            </div>
          </div>

          <div className="p-4">
            {chapters.map((chapter) => (
              <div key={chapter.id} className="mb-4">
                <h3 className="font-medium text-gray-900 mb-2 px-2">{chapter.title}</h3>
                <div className="space-y-1">
                  {chapter.topics?.map((topic) => (
                    <div
                      key={topic.id}
                      onClick={() => setSelectedTopic(topic)}
                      className={`chapter-item flex items-center justify-between p-3 rounded-lg cursor-pointer ${
                        selectedTopic?.id === topic.id
                          ? 'bg-primary-100 text-primary-700 border border-primary-200'
                          : 'hover:bg-gray-50'
                      }`}
                    >
                      <div className="flex-1">
                        <p className="text-sm font-medium">{topic.title}</p>
                        <p className="text-xs text-gray-500 mt-1">
                          {topic.content ? `${topic.content.length} chars` : 'No content'}
                        </p>
                      </div>
                      <div className="flex items-center space-x-2">
                        {getTopicStatusIcon(generatingTopicId === topic.id ? 'generating' : topic.status)}
                        {!topic.content && (
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              generateTopicContent(topic);
                            }}
                            disabled={generating}
                            className="p-1 text-primary-600 hover:text-primary-700 disabled:opacity-50"
                          >
                            <SafeIcon icon={FiPlay} className="h-3 w-3" />
                          </button>
                        )}
                      </div>
                    </div>
                  )) || (
                    <p className="text-sm text-gray-500 px-2">No topics in this chapter</p>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Main Content Area */}
        <div className="flex-1 flex flex-col">
          {selectedTopic ? (
            <>
              {/* Topic Header */}
              <div className="bg-white border-b border-gray-200 p-6">
                <div className="flex justify-between items-start">
                  <div>
                    <h1 className="text-2xl font-bold text-gray-900">{selectedTopic.title}</h1>
                    <p className="text-gray-600 mt-1">{selectedTopic.objectives}</p>
                  </div>
                  <div className="flex space-x-3">
                    <button
                      onClick={() => generateImage(selectedTopic)}
                      className="inline-flex items-center px-3 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                    >
                      <SafeIcon icon={FiImage} className="h-4 w-4 mr-2" />
                      Generate Image
                    </button>
                    {!selectedTopic.content && (
                      <button
                        onClick={() => generateTopicContent(selectedTopic)}
                        disabled={generating}
                        className="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50"
                      >
                        {generatingTopicId === selectedTopic.id ? (
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        ) : (
                          <SafeIcon icon={FiPlay} className="h-4 w-4 mr-2" />
                        )}
                        Generate Content
                      </button>
                    )}
                    <button
                      onClick={saveTopicContent}
                      disabled={saving}
                      className="inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors disabled:opacity-50"
                    >
                      {saving ? (
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      ) : (
                        <SafeIcon icon={FiSave} className="h-4 w-4 mr-2" />
                      )}
                      Save
                    </button>
                  </div>
                </div>
              </div>

              {/* Editor */}
              <div className="flex-1 p-6 bg-gray-50">
                <div className="bg-white rounded-lg shadow-sm border border-gray-200 h-full">
                  <ReactQuill
                    value={selectedTopic.content || ''}
                    onChange={(content) => setSelectedTopic({ ...selectedTopic, content })}
                    modules={quillModules}
                    className="editor-content h-full"
                    placeholder="Start writing your content here, or click 'Generate Content' to let AI create it for you..."
                  />
                </div>
              </div>
            </>
          ) : (
            <div className="flex-1 flex items-center justify-center bg-gray-50">
              <div className="text-center">
                <SafeIcon icon={FiEdit3} className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-gray-900 mb-2">
                  Select a topic to start editing
                </h3>
                <p className="text-gray-600">
                  Choose a topic from the sidebar to view and edit its content
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default BookEditor;